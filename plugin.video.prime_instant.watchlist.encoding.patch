diff -Nur a/addon.xml b/addon.xml
--- a/addon.xml	2015-05-03 11:08:29.898960142 +0200
+++ b/addon.xml	2015-05-03 12:46:56.278501514 +0200
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<addon id="plugin.video.prime_instant" name="Amazon Prime Instant Video" version="1.0.3-alpha3" provider-name="XLordKX">
+<addon id="plugin.video.prime_instant" name="Amazon Prime Instant Video" version="1.0.2-r15" provider-name="AddonScriptorDE">
     <requires>
         <import addon="xbmc.python" version="2.1.0"/>
         <import addon="script.module.mechanize" version="0.2.6"/>
@@ -14,8 +14,9 @@
         <description lang="en">Amazon Prime Instant Video Add-on (US/UK/DE)</description>
         <disclaimer lang="en">Some parts of this addon may not be legal in your country of residence - please check with your local laws before installing.</disclaimer>
         <license>GNU GENERAL PUBLIC LICENSE. Version 2, June 1991</license>
-        <source>https://github.com/XLordKX/kodi</source>
+        <source>https://github.com/AddonScriptorDE/plugin.video.prime_instant</source>
         <forum>http://www.kodinerds.net/index.php/Thread/43912-RELEASE-Amazon-Prime-Instant-Video-US-UK-DE/</forum>
+        <email>AddonScriptorDE at yahoo dot de</email>
         <website>http://www.amazon.com</website>
     </extension>
 </addon>
diff -Nur a/changelog.txt b/changelog.txt
--- a/changelog.txt	2015-05-03 11:08:29.898960142 +0200
+++ b/changelog.txt	2015-05-03 12:46:56.278501514 +0200
@@ -1,12 +1,29 @@
-1.0.3
-- Forked from AddonScriptorDE Repository
-- Bug fixes
-- Added translations for some dialogs
+1.0.0
+- Initial release
+1.0.1
+- Changed login (email and password are not stored anymore)
 1.0.2
 - Added debug output
 - Fixed folder encoding issue
 - Some small improvements
-1.0.1
-- Changed login (email and password are not stored anymore)
-1.0.0
-- Initial release
+1.0.2-r1
+- Added end soon section
+1.0.2-r2
+- Fixed encoding of the watchlist
+1.0.2-r7
+- Fix for new site version to play videos
+1.0.2-r8
+- Fix for video information
+1.0.2-r9
+- Fix watchlist for new site version
+1.0.2-r11
+- Merge with syscrashs version
+  * Watchlist korrigiert
+  * Filminfos korrigiert
+  * csrfToken korrigiert
+1.0.2-r12
+- Fix detail-Bug with umlauts
+1.0.2-r13
+- Remove whitespaces in episode description
+1.0.2-r15
+- merge with https://github.com/XLordKX/kodi commit 171bb377fe
diff -Nur a/default.py b/default.py
--- a/default.py	2015-05-03 11:08:29.898960142 +0200
+++ b/default.py	2015-05-03 12:46:56.278501514 +0200
@@ -53,6 +53,7 @@
 showNotification = addon.getSetting("showNotification") == "true"
 showOriginals = addon.getSetting("showOriginals") == "true"
 showLibrary = addon.getSetting("showLibrary") == "true"
+showAvailability = addon.getSetting("showAvailability") == "true"
 showKids = addon.getSetting("showKids") == "true"
 forceView = addon.getSetting("forceView") == "true"
 updateDB = addon.getSetting("updateDB") == "true"
@@ -77,12 +78,9 @@
 addon.setSetting('email', '')
 addon.setSetting('password', '')
 
-
 opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
-userAgent = "Mozilla/5.0 (X11; U; Linux i686; en-EN) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.127 Large Screen Safari/533.4 GoogleTV/ 162671"
-#userAgent = "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0"
+userAgent = "Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.127 Large Screen Safari/533.4 GoogleTV/ 162671"
 opener.addheaders = [('User-agent', userAgent)]
-deviceTypeID = "A324MFXUEZFF7B"
 
 if not os.path.isdir(addonUserDataFolder):
     os.mkdir(addonUserDataFolder)
@@ -102,7 +100,6 @@
     cj.load(cookieFile)
 
 
-
 def index():
     loginResult = login()
     if loginResult=="prime":
@@ -127,6 +124,7 @@
             addDir(translation(30007), urlMain+"/gp/search/ajax/?rh=n%3A3010075031%2Cn%3A!3010076031%2Cn%3A3015915031%2Cp_n_theme_browse-bin%3A3015972031%2Cp_85%3A3282148031&ie=UTF8", 'listMovies', "")
         addDir(translation(30008), urlMain+"/gp/search/ajax/?_encoding=UTF8&rh=n%3A3279204031%2Cn%3A!3010076031%2Cn%3A3356018031&sort=date-desc-rank", 'listMovies', "")
         addDir(translation(30009), urlMain+"/s/?n=4963842031", 'listMovies', "")
+        addDir(translation(30999), urlMain+"/gp/search/ajax/?_encoding=UTF8&rh=n%3A3010075031%2Cn%3A3356018031%2Cn%3A4225009031&sort=popularity-rank", 'listMovies', "")
     elif siteVersion=="com":
         addDir(translation(30006), urlMain+"/gp/search/ajax/?_encoding=UTF8&rh=n%3A2858778011%2Cn%3A7613704011&sort=popularity-rank", 'listMovies', "")
         addDir(translation(30011), urlMain+"/gp/search/other/?rh=n%3A2676882011%2Cn%3A7613704011&pickerToList=theme_browse-bin&ie=UTF8", 'listGenres', "", "movie")
@@ -158,6 +156,7 @@
             addDir(translation(30007), urlMain+"/gp/search/ajax/?rh=n%3A3010075031%2Cn%3A!3010076031%2Cn%3A3015916031%2Cp_n_theme_browse-bin%3A3015972031%2Cp_85%3A3282148031&ie=UTF8", 'listShows', "")
         addDir(translation(30010), urlMain+"/gp/search/ajax/?_encoding=UTF8&keywords=[OV]&rh=n%3A3010075031%2Cn%3A3015916031%2Ck%3A[OV]%2Cp_85%3A3282148031&sort=date-desc-rank", 'listShows', "")
         addDir(translation(30008), urlMain+"/gp/search/ajax/?_encoding=UTF8&rh=n%3A3279204031%2Cn%3A3010075031%2Cn%3A3015916031&sort=date-desc-rank", 'listShows', "")
+        addDir(translation(30999), urlMain+"/gp/search/ajax/?_encoding=UTF8&rh=n%3A3010075031%2Cn%3A3356019031%2Cn%3A4225009031&sort=popularity-rank", 'listShows', "")
     elif siteVersion=="com":
         addDir(translation(30006), urlMain+"/gp/search/ajax/?_encoding=UTF8&rh=n%3A2858778011%2Cn%3A7613705011&sort=popularity-rank", 'listShows', "")
         addDir(translation(30011), urlMain+"/gp/search/other/?rh=n%3A2676882011%2Cn%3A7613705011&pickerToList=theme_browse-bin&ie=UTF8", 'listGenres', "", "tv")
@@ -214,7 +213,7 @@
     elif siteVersion=="co.uk":
         content = opener.open(urlMain+"/b/?ie=UTF8&node=5687760031").read()
     debug(content)
-    match = re.compile("token : '(.+?)'", re.DOTALL).findall(content)
+    match = re.compile('csrf":"(.+?)"', re.DOTALL).findall(content)
     if match:
         addon.setSetting('csrfToken', match[0])
     content = content[content.find('<map name="pilots'):]
@@ -264,14 +263,43 @@
     match = re.compile('csrf":"(.+?)"', re.DOTALL).findall(content)
     if match:
         addon.setSetting('csrfToken', match[0])
-    spl = content.split('<div class="innerItem"')
+
+    # search for all entries
+    entries=re.compile('\<div\s+class\s*=\s*"grid-list-item\s+downloadable.+?$', re.DOTALL).findall(content)
+    if entries:
+        entry=entries[0]
+        elements=[]
+
+        # for all entries, do the same
+        while True:
+            # serach for beginning!
+            match=re.compile('^\s*\<div\s+class\s*=\s*"grid-list-item\s+downloadable.*?\>', re.DOTALL).findall(entry)
+            if match:
+                index=entry.find(match[0])+len(match[0])
+                entry=entry[index:]
+                depth=1
+                element=match[0]
+
+                while depth > 0:
+                    match=re.compile('^.*?\<div.*?\>', re.DOTALL).findall(entry)
+                    matchend=re.compile('^.*?\<\/div\>', re.DOTALL).findall(match[0])
+                    if matchend:
+                        entry=entry[len(matchend[0]):]
+                        depth=depth-1
+                        element+=matchend[0]
+                    else:
+                        entry=entry[len(match[0]):]
+                        depth=depth+1
+                        element+=match[0]
+                elements.append(element)
+            else:
+                break
+
     dlParams = []
     videoType = ""
     showEntries = []
-    for i in range(1, len(spl), 1):
-        entry = spl[i]
-        entry = entry[:entry.find('</td>')]
-        if "/library/" in url or ("/watchlist/" in url and ("class='prime-meta'" in entry or 'class="prime-logo"' in entry)):
+    for entry in elements:
+        if "/library/" in url or ("/watchlist/" in url and ("class='prime-meta'" in entry or 'class="prime-logo"' in entry or "class='item-green'" in entry or 'class="packshot-sash' in entry)):
             match = re.compile('data-prod-type="(.+?)"', re.DOTALL).findall(entry)
             if match:
                 videoType = match[0]
@@ -279,10 +307,15 @@
                 videoID = match[0]
                 match = re.compile('title="(.+?)"', re.DOTALL).findall(entry)
                 title = match[0]
-                title = cleanTitle(title)
+                avail=''
+                if showAvailability:
+                    match = re.compile('\<span\s+class\s*=\s*"packshot-message"\s*\>(.+?)\<\/span\>', re.DOTALL).findall(entry)
+                    if match:
+                        avail=" - " + cleanInput(match[0])
+                title = cleanTitle(title)+avail
                 dlParams.append({'type':videoType, 'id':videoID, 'title':cleanTitleTMDB(cleanSeasonTitle(title)), 'year':''})
-                if videoType=="tv":
-                    title = cleanSeasonTitle(title)
+                if videoType=="downloadable_tv_season":
+                    title = cleanSeasonTitle(title)+avail
                     if title in showEntries:
                         continue
                     showEntries.append(title)
@@ -291,24 +324,24 @@
                 if match:
                     thumbUrl = match[0].replace(".jpg", "")
                     thumbUrl = thumbUrl[:thumbUrl.rfind(".")]+".jpg"
-                if videoType == "movie":
+                if videoType == "downloadable_movie":
                     addLinkR(title, videoID, "playVideo", thumbUrl, videoType)
                 else:
                     addShowDirR(title, videoID, "listSeasons", thumbUrl, videoType)
-    if videoType == "movie":
+    if videoType == "downloadable_movie":
         xbmcplugin.setContent(pluginhandle, "movies")
     else:
         xbmcplugin.setContent(pluginhandle, "tvshows")
-    if useTMDb and videoType == "movie":
-        dlParams = json.dumps(dlParams)
+    if useTMDb and videoType == "downloadable_movie":
+        dlParams = json.dumps(unicode(dlParams))
         xbmc.executebuiltin('XBMC.RunScript('+downloadScript+', '+urllib.quote_plus(str(dlParams))+')')
     elif useTMDb:
-        dlParams = json.dumps(dlParams)
+        dlParams = json.dumps(unicode(dlParams))
         xbmc.executebuiltin('XBMC.RunScript('+downloadScriptTV+', '+urllib.quote_plus(str(dlParams))+')')
     xbmcplugin.endOfDirectory(pluginhandle)
     xbmc.sleep(100)
     if forceView:
-        if videoType == "movie":
+        if videoType == "downloadable_movie":
             xbmc.executebuiltin('Container.SetViewMode('+viewIdMovies+')')
         else:
             xbmc.executebuiltin('Container.SetViewMode('+viewIdShows+')')
@@ -321,11 +354,16 @@
     content = content.replace("\\","")
     if 'id="catCorResults"' in content:
         content = content[:content.find('id="catCorResults"')]
-    match = re.compile('"csrfToken":"(.+?)"', re.DOTALL).findall(content)
+    match = re.compile('csrf":"(.+?)"', re.DOTALL).findall(content)
     if match:
         addon.setSetting('csrfToken', match[0])
     spl = content.split('id="result_')
     dlParams = []
+    match = re.compile('\<\/span\>(\<a class="a-link-normal a-text-normal" href=".+?"\>.+?\<\/a\>)', re.DOTALL).findall(content)
+    if match:
+        textMatch=re.compile('\>(.+?)\<', re.DOTALL).findall(match[0])
+        linkMatch=re.compile('href="(.+?)"\>', re.DOTALL).findall(match[0])
+        addDir(textMatch[0], urlMain+linkMatch[0].replace("&amp;","&"), "listMovies", "DefaultTVShows.png")
     for i in range(1, len(spl), 1):
         entry = spl[i]
         match = re.compile('asin="(.+?)"', re.DOTALL).findall(entry)
@@ -356,7 +394,7 @@
             else:
                 addLink(title, videoID, "playVideo", thumbUrl, "movie", "", "", year)
     if useTMDb:
-        dlParams = json.dumps(unicode(dlParams))
+        dlParams = json.dumps(dlParams)
         xbmc.executebuiltin('XBMC.RunScript('+downloadScript+', '+urllib.quote_plus(str(dlParams))+')')
     match = re.compile('class="pagnNext".*?href="(.+?)"', re.DOTALL).findall(content)
     if match:
@@ -429,7 +467,7 @@
     xbmcplugin.setContent(pluginhandle, "movies")
     content = opener.open(urlMain+"/gp/product/"+videoID).read()
     debug(content)
-    match = re.compile("token : '(.+?)'", re.DOTALL).findall(content)
+    match = re.compile('csrf":"(.+?)"', re.DOTALL).findall(content)
     if match:
         addon.setSetting('csrfToken', match[0])
     spl = content.split('<li class="packshot')
@@ -541,19 +579,22 @@
     if match:
         addon.setSetting('csrfToken', match[0])
     matchSeason = re.compile('"seasonNumber":"(.+?)"', re.DOTALL).findall(content)
+    seasonNr="0"
+    if matchSeason:
+        seasonNr=matchSeason[0]
     spl = content.split('href="'+urlMain+'/gp/product')
     for i in range(1, len(spl), 1):
         entry = spl[i]
         entry = entry[:entry.find('</li>')]
         match = re.compile('class="episode-title">(.+?)<', re.DOTALL).findall(entry)
-        if match and ('class="prime-logo-small"' in entry or 'class="episode-status cell-free"' in entry):
+        if match and ('class="prime-logo-small"' in entry or 'class="episode-status cell-free"' in entry or 'class="episode-status cell-owned"' in entry):
             title = match[0]
             title = cleanTitle(title)
             episodeNr = title[:title.find('.')]
             title = title[title.find('.')+1:].strip()
             match = re.compile('/(.+?)/', re.DOTALL).findall(entry)
             episodeID = match[0]
-            match = re.compile('<p>.+?</span>(.+?)</p>', re.DOTALL).findall(entry)
+            match = re.compile('<p>.+?</span>\s*(.+?)\s*</p>', re.DOTALL).findall(entry)
             desc = ""
             if match:
                 desc = cleanTitle(match[0])
@@ -583,7 +624,7 @@
                 percentage = match[0]
                 if int(percentage)>95:
                     playcount = 1
-            addEpisodeLink(title, episodeID, 'playVideo', thumb, desc, length, matchSeason[0], episodeNr, seriesID, playcount, aired, seriesName)
+            addEpisodeLink(title, episodeID, 'playVideo', thumb, desc, length, seasonNr, episodeNr, seriesID, playcount, aired, seriesName)
     xbmcplugin.endOfDirectory(pluginhandle)
     xbmc.sleep(100)
     if forceView:
@@ -629,18 +670,19 @@
     if matchCID:
         matchSWFUrl=re.compile('<script type="text/javascript" src="(.+?)"', re.DOTALL).findall(content)
         flashContent=opener.open(matchSWFUrl[0]).read()
-        matchSWF=re.compile('LEGACY_FLASH_SWF="(.+?)"').findall(flashContent)
-        matchTitle=re.compile('"og:title" content="(.+?)"', re.DOTALL).findall(content)
-        matchThumb=re.compile('"og:image" content="(.+?)"', re.DOTALL).findall(content)
+        matchTitle=re.compile('"contentRating":".+?","name":"(.+?)"', re.DOTALL).findall(content)
+        matchThumb=re.compile('"video":.+?"thumbnailUrl":"(.+?)"', re.DOTALL).findall(content)
         matchToken=re.compile('"csrfToken":"(.+?)"', re.DOTALL).findall(content)
+        matchSWF=re.compile('LEGACY_FLASH_SWF="(.+?)"').findall(flashContent)
         matchMID=re.compile('"marketplaceID":"(.+?)"').findall(content)
+        matchDID=re.compile('FLASH_GOOGLE_TV="(.+?)"').findall(flashContent)
         if not playTrailer or (playTrailer and hasTrailer and preferAmazonTrailer and siteVersion!="com"):
             content=opener.open(urlMainS+'/gp/video/streaming/player-token.json?callback=jQuery1640'+''.join(random.choice(string.digits) for x in range(18))+'_'+str(int(time.time()*1000))+'&csrftoken='+urllib.quote_plus(matchToken[0])+'&_='+str(int(time.time()*1000))).read()
             matchToken=re.compile('"token":"(.+?)"', re.DOTALL).findall(content)
         content = ""
         tooManyConnections = True
         if playTrailer and hasTrailer and preferAmazonTrailer and siteVersion!="com":
-            content = opener.open('https://'+apiMain+'.amazon.com/cdp/catalog/GetStreamingTrailerUrls?version=1&format=json&firmware=WIN%2011,7,700,224%20PlugIn&marketplaceID='+urllib.quote_plus(matchMID[0])+'&token='+urllib.quote_plus(matchToken[0])+'&deviceTypeID='+urllib.quote_plus(deviceTypeID)+'&asin='+videoID+'&customerID='+urllib.quote_plus(matchCID[0])+'&deviceID='+urllib.quote_plus(matchCID[0])+str(int(time.time()*1000))+videoID).read()
+            content = opener.open('https://'+apiMain+'.amazon.com/cdp/catalog/GetStreamingTrailerUrls?version=1&format=json&firmware=WIN%2011,7,700,224%20PlugIn&marketplaceID='+urllib.quote_plus(matchMID[0])+'&token='+urllib.quote_plus(matchToken[0])+'&deviceTypeID='+urllib.quote_plus(matchDID[0])+'&asin='+videoID+'&customerID='+urllib.quote_plus(matchCID[0])+'&deviceID='+urllib.quote_plus(matchCID[0])+str(int(time.time()*1000))+videoID).read()
         elif not playTrailer:
             if len(maxDevicesTimestamp) < maxDevices:
                 maxDevicesTimestamp += [0]
@@ -648,13 +690,13 @@
                 maxDevicesTimestamp.pop()
             for i, val in enumerate(maxDevicesTimestamp):
                 if ((int(val) + maxDevicesWaitTime) <= int(time.time())):
-                    content = opener.open('https://'+apiMain+'.amazon.com/cdp/catalog/GetStreamingUrlSets?version=1&format=json&firmware=WIN%2011,7,700,224%20PlugIn&marketplaceID='+urllib.quote_plus(matchMID[0])+'&token='+urllib.quote_plus(matchToken[0])+'&deviceTypeID='+urllib.quote_plus(deviceTypeID)+'&asin='+videoID+'&customerID='+urllib.quote_plus(matchCID[0])+'&deviceID='+urllib.quote_plus(matchCID[0])+str(int(time.time()*1000))+videoID).read()
+                    content = opener.open('https://'+apiMain+'.amazon.com/cdp/catalog/GetStreamingUrlSets?version=1&format=json&firmware=WIN%2011,7,700,224%20PlugIn&marketplaceID='+urllib.quote_plus(matchMID[0])+'&token='+urllib.quote_plus(matchToken[0])+'&deviceTypeID='+urllib.quote_plus(matchDID[0])+'&asin='+videoID+'&customerID='+urllib.quote_plus(matchCID[0])+'&deviceID='+urllib.quote_plus(matchCID[0])+str(int(time.time()*1000))+videoID).read()
                     if not "SUCCESS" in str(content):
                         maxDevicesTimestamp[i] = int(val) + 10
                     elif '$de' in str(content):
                         ediag = xbmcgui.Dialog()
                         if (ediag.yesno(translation(30098), translation(30099))):
-                            content = opener.open('https://'+apiMain+'.amazon.com/cdp/catalog/GetStreamingUrlSets?version=1&format=json&xws-fa-ov=true&audioTrackId=eng_dialog_0&firmware=WIN%2011,7,700,224%20PlugIn&marketplaceID='+urllib.quote_plus(matchMID[0])+'&token='+urllib.quote_plus(matchToken[0])+'&deviceTypeID='+urllib.quote_plus(deviceTypeID)+'&asin='+videoID+'&customerID='+urllib.quote_plus(matchCID[0])+'&deviceID='+urllib.quote_plus(matchCID[0])+str(int(time.time()*1000))+videoID).read()
+                            content = opener.open('https://'+apiMain+'.amazon.com/cdp/catalog/GetStreamingUrlSets?version=1&format=json&audioTrackId=eng_dialog_0&firmware=WIN%2011,7,700,224%20PlugIn&marketplaceID='+urllib.quote_plus(matchMID[0])+'&token='+urllib.quote_plus(matchToken[0])+'&deviceTypeID='+urllib.quote_plus(matchDID[0])+'&asin='+videoID+'&customerID='+urllib.quote_plus(matchCID[0])+'&deviceID='+urllib.quote_plus(matchCID[0])+str(int(time.time()*1000))+videoID).read()
                     else:
                         tooManyConnections = False
                     break
@@ -750,7 +792,8 @@
 def showInfo(videoID):
     xbmcplugin.setContent(pluginhandle, "movies")
     content=opener.open(urlMain+"/dp/"+videoID).read()
-    match=re.compile('<script type = "application/ld+json"> (.+?) </script>', re.DOTALL).findall(content)
+
+    match=re.compile('\<script[\ \t]+type[\ \t]*=[\ \t]*"application\/ld\+json"\>[\ \t]*(.+?)[\ \t]*\<\/script\>', re.DOTALL).findall(content)
     jsonstr=cleanInput(match[0])
     parsed=json.loads(jsonstr)
     title = parsed["name"]
@@ -758,12 +801,9 @@
     year = match[0]
     title = title+" ("+year+")"
     title = cleanTitle(title)
-
     thumb = parsed["thumbnailUrl"].replace(".jpg", "")
     thumb = thumb[:thumb.rfind(".")]+".jpg"
-    
     director = parsed["director"][0]["name"].replace(",",", ")
-
     actors = parsed["actor"][0]["name"].replace(",",", ")
     match=re.compile('property="og:duration" content="(.+?)"', re.DOTALL).findall(content)
     length = str(int(match[0])/60)+" min."
@@ -848,7 +888,7 @@
         keyboard.doModal()
         if keyboard.isConfirmed() and keyboard.getText():
             email = keyboard.getText()
-            keyboard = xbmc.Keyboard('', translation(30091))
+            keyboard = xbmc.Keyboard('', translation(30091), True)
             keyboard.doModal()
             if keyboard.isConfirmed() and keyboard.getText():
                 password = keyboard.getText()
@@ -871,12 +911,52 @@
             return "none"
 
 
+def cleanInput(str):
+
+    str = str.replace("&amp;","&").replace("&#39;","'").replace("&eacute;","Ã©").replace("&auml;","Ã€").replace("&ouml;","Ã¶").replace("&uuml;","ÃŒ").replace("&Auml;","Ã").replace("&Ouml;","Ã").replace("&Uuml;","Ã").replace("&szlig;","Ã").replace("&hellip;","âŠ")
+    str = str.replace("&#233;","Ã©").replace("&#228;","Ã€").replace("&#246;","Ã¶").replace("&#252;","ÃŒ").replace("&#196;","Ã").replace("&#214;","Ã").replace("&#220;","Ã").replace("&#223;","Ã")
+    printable=string.printable+"Ã©Ã€Ã¶ÃŒÃÃÃÃâŠ"
+    newStr=''
+    lastByte='\xff'
+    for c in str:
+        if c == '\xe4' or ( lastByte == '\x00' and c == '\xe4' ) or ( lastByte == '\xc3' and c == '\xa4'):
+            newStr+='Ã€'
+            lastByte=c
+        elif c == '\xf6' or ( lastByte == '\x00' and c == '\xf6' ) or ( lastByte == '\xc3' and c == '\xb6'):
+            newStr+='Ã¶'
+            lastByte=c
+        elif c == '\xfc' or ( lastByte == '\x00' and c == '\xfc' ) or ( lastByte == '\xc3' and c == '\xbc') or ( lastByte == '\xc3' and ( c != '\xa4' and c != '\xb6' and c != '\x84' and c != '\x69' and c != '\x9c' and c != '\x9f' and c != '\xa9' ) ):
+            newStr+='ÃŒ'
+            lastByte=c
+        elif c == '\xc4' or ( lastByte == '\x00' and c == '\xc4' ) or ( lastByte == '\xc3' and c == '\x84'):
+            newStr+='Ã'
+            lastByte=c
+        elif c == '\xd6' or ( lastByte == '\x00' and c == '\xd6' ) or ( lastByte == '\xc3' and c == '\x69'):
+            newStr+='Ã'
+            lastByte=c
+        elif c == '\xdc' or ( lastByte == '\x00' and c == '\xdc' ) or ( lastByte == '\xc3' and c == '\x9c'):
+            newStr+='Ã'
+            lastByte=c
+        elif c == '\xdf' or ( lastByte == '\x00' and c == '\xdf' ) or ( lastByte == '\xc3' and c == '\x9f'):
+            newStr+='Ã'
+            lastByte=c
+        elif c == '\xe9' or ( lastByte == '\x00' and c == '\xe9' ) or ( lastByte == '\xc3' and c == '\xa9'):
+            newStr+='Ã©'
+            lastByte=c
+        elif c == '\x00' or c == '\xc3':
+            lastByte=c
+        else:
+            newStr+=c
+            lastByte=c
+
+    newStr = filter(lambda c: c in printable, newStr)
+    return newStr
+
+
 def cleanTitle(title):
     if "[HD]" in title:
         title = title[:title.find("[HD]")]
-    title = title.replace("&amp;","&").replace("&#39;","'").replace("&eacute;","é").replace("&auml;","ä").replace("&ouml;","ö").replace("&uuml;","ü").replace("&Auml;","Ä").replace("&Ouml;","Ö").replace("&Uuml;","Ü").replace("&szlig;","ß").replace("&hellip;","")
-    title = title.replace("&#233;","é").replace("&#228;","ä").replace("&#246;","ö").replace("&#252;","ü").replace("&#196;","Ä").replace("&#214;","Ö").replace("&#220;","Ü").replace("&#223;","ß")
-    return title.replace("\xe4","ä").replace("\xf6","ö").replace("\xfc","ü").replace("\xc4","Ä").replace("\xd6","Ö").replace("\xdc","Ü").replace("\xdf","ß").strip()
+    return cleanInput(title)
 
 
 def cleanSeasonTitle(title):
diff -Nur a/resources/language/English/strings.xml b/resources/language/English/strings.xml
--- a/resources/language/English/strings.xml	2015-05-03 11:08:29.898960142 +0200
+++ b/resources/language/English/strings.xml	2015-05-03 12:46:56.278501514 +0200
@@ -77,4 +77,6 @@
   <string id="30201">General</string>
   <string id="30202">Views</string>
   <string id="30203">Advanced</string>
+  <string id="30998">Show availability</string>
+  <string id="30999">Deleted soon on prime instant video</string>
 </strings>
diff -Nur a/resources/language/German/strings.xml b/resources/language/German/strings.xml
--- a/resources/language/German/strings.xml	2015-05-03 11:08:29.898960142 +0200
+++ b/resources/language/German/strings.xml	2015-05-03 12:46:56.278501514 +0200
@@ -77,4 +77,6 @@
   <string id="30201">Allgemein</string>
   <string id="30202">Ansichten</string>
   <string id="30203">Erweitert</string>
+  <string id="30998">VerfÃŒgbarkeit anzeigen</string>
+  <string id="30999">Nur noch begrenzte Zeit bei Prime Instant Video</string>
 </strings>
diff -Nur a/resources/settings.xml b/resources/settings.xml
--- a/resources/settings.xml	2015-05-03 11:08:29.898960142 +0200
+++ b/resources/settings.xml	2015-05-03 12:46:56.278501514 +0200
@@ -21,6 +21,7 @@
         <setting id="preferAmazonTrailer" type="bool" label="30120" default="false"/>
         <setting id="updateDB" type="bool" label="30114" default="true"/>
         <setting id="showNotification" type="bool" label="30122" default="true"/>
+        <setting id="showAvailability" type="bool" label="30998" default="false"/>
         <setting type="sep" />
         <setting label="30115" type="action" action="RunPlugin(plugin://plugin.video.prime_instant/?mode=deleteCache)"/>
         <setting label="30116" type="action" action="RunPlugin(plugin://plugin.video.prime_instant/?mode=deleteCookies)"/>
